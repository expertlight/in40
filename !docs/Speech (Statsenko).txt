1. CMS - это система управления контентом сайта, инструмент, облегчающий добавление, редактирование, удаление и другие контролирующие действия над информацией. Этот инструмент является неотемлимым атрибутом любого современного динамического веб-приложения.
Все веб-приложения можно поделить по назначению на несколько больших категорий:
- Информационные ресурсы (тематические сайты, дающие информацию по узкоспециализированной теме)
- Интернет-представительства (сайты-визитки, каталоги, интернет-магазины, корпоротивные сайты)
- Веб-сервисы (сайты, предназначенные для выполнения каких-либо задач - почта, блоги, хранилища фотографий, файлов, видео и другого контента)
Форумная схема организации сайта может применяться во всех этих категориях. Форумы очень распространены в интернете и могут иметь самую различную тематику - клубы по интересам, тематические разделы субъектов страны, внутриорганизационные обсуждения и дискуссии на самые различные темы в самых различных кругах. Человек, задающий вопрос или поднимающий тему, начинает обсуждение, в котором может принять участие любой пользователь веб-приложения. Тем самым происходит обмен мнениями и получение важной информации по заданной тематике.
На современном этапе форумы получили вторую жизнь и стали элементами социальных сетей.

3. Для выполнения поставленной задачи стало необходимостью выбор современных и удобных технологий, используемых при разработке веб-приложений. Современные технологии имеют 3 независимых направления - 
- технологии, предназначенные для выполнения на сервере (генерация клиентской части)
- технологии, выполняемые на клиенте (клиентская часть)
- способы организации хранения информации
По каждому направлению были рассмотрены основные современные технологии и выбраны следующие:
1) Серверный язык программирования PHP. Был выпран по следующим причинам: большое количество документации, в т.ч. и на русском языке; большое количество уже существующих методик разработки на этом языке; самая низкая стоимость сервера с поддержкой этого языка; большое количество стабильного инструментария для разработки и отладки приложения; отсутствие привязки к конкретной платформе или операционной системе.
2) Клиентский язык программирования JavaScript. Был выпран по следующим причинам: - самая высокая распространённость у языка JavaScript, он поддерживается всеми современными браузерами; большое количество документации по этому языку; приемлемая производительность при выполнении сценариев; в отличие от конкурентов, для его работы не нужны отдельные плагины и определенная ОС; простота отладки и высокая скорость разработки.
Также используется связка HTML+CSS, ставшая стандартом в веб-программировании.
3) Способ хранения с использованием баз данных. Была выбрана бесплатная СУБД MySQL. Главное преимущество выбранной СУБД в том, что работа с ней поддерживается серверным языком программирования php на уровне языка, главная работа разработчика сводится к написанию SQL-скриптов для чтения/записи необходимой информации.

5. Один из самых важных компонентов в веб-приложении - это его скелет, так называемая структура, архитектура приложения. Правильно спроектированная архитектура - залог успеха при дальнейшей разработке и наращивании функциональности.
Разработка архитектуры начата с рассмотрения паттернов проектирования. Паттерны - это шаблоны, позволяющие использовать те или иные приемы для успешной реализации приложения.
Сначала был рассмотрен популярный проект MVC (модель-представление-контроллер).
Основные элементы: 
- модель - это так называемая бизнес-логика, данные и их первоначальная подготовка к выводу конечному пользователю
- представление - компонент, отображающий данные конечному пользователю
- контроллер - компонент, реагирующий на внешние события и изменяющий модель и представление в соответсвие с логикой
В нашем случае недостатком такого подхода является то, что Модель и Представление слишком связаны между собой, что не применимо к гибким веб-приложениям, поскольку функциональность требует возможность быстрого изменения внешнего вида приложения (темы оформления и тд).
Модификацией данного паттера является MVP (модель-представление-представитель), где новый	 элемент Представитель, в отличие от Контроллера, общается непосредственно с моделью приложения, то есть является медиатором между логикой и внешним видом. Данный вариант структуры удовлетворяет требованию развязности Модели от реализации внешнего вида, поэтому рассмотрим возможные реализации этой структуры в разрабатываемом веб-приложении.
Первоначально была предложена так называемая централизованная схема. Она подразумевает присутствие центрального скрипта-обработчика запросов, который, в зависимости от надобности, вызывал бы компоновщики необходимых страниц.
Проблемы данного подхода:
- центральный скрипт становится узким местом в приложении, возможны проблемы производительности;
- центральный скрипт должен содержать слишком сложную логику для выборки нужного компоновщика;
- проверка безопасности происходит на начальном этапе. Как следствие, модулю безопасности необходимо знать о корректности запроса, корректности аргументов уже на начальном этапе, что сильно усложняет логику приложения и увеличивает вероятность ошибок;
- конечный пользователь будет видеть адрес страницы, всегда начинающийся с названия центрально скрипта – теряется логический смысл ссылок.
Данные проблемы были решены в следующем варианте.
В отличие от предыдущего варианта, запрос поступает сразу на компоновщик конкретной страницы, без промежуточного центрального скрипта. Часть проверок безопасности перенесена в Модель, на уровень скриптов к Базе Данных. На этом уровне легко выделяются аргументы для проверки, и уменьшается количество логики. Остальная часть проверок, такая, как разделение прав пользователей, проверка авторизации перенесена в компоновщики для ограничения вывода информации.
Главной проблемой данного варианта является то, что любой компоновщик может содержать блоки, которые повторяются в других компоновщиках. Отсюда вытекает 2 проблемы:
- проблема повторяемости кода – каждый компоновщик будет содержать проверки авторизации, проверки безопасности и т.д.
- проблема сопровождаемости кода – при обнаружении ошибки, либо изменении логики в одном компоновщике появляется необходимость исправлять соответствующие блоки во всех других компоновщиках.
Данные проблемы были решены в финальном варианте структуры приложения.
В данном варианте каждый логический блок страницы изолирован от других в отдельном модуле (Рис. 19).
Каждый модуль имеет доступ к Модели через скрипты к базе данных и к Представлению, через Шаблонизатор и набор шаблонов. Также, каждый модуль содержит свои необходимые проверки безопасности, отдавая компоновщикам только признаки того, что загрузка модуля прошла успешно, либо не успешно.
Роль компоновщиков в данном случае – подключать необходимые модули для генерации той или иной конечной страницы.
В результате паттерн MVP приобрел следующий вид:
Представитель:
- компоновщики конкретных страниц;
- набор модулей.
Модель:
- скрипты к базе данных и конечные проверки корректности аргументов;
- база данных MySQL.
Представление:
- шаблонизатор;
- набор шаблонов, стилей и клиентских скриптов.

7. Мною была разработана часть программных модулей, а также элементы, отвечающие за Представление в архитектуре приложения - шаблоны и шаблонизатор.
Модуль логина - это модуль авторизации, внешне представленный как поля для ввода имени пользователя и его пароля, а также строка-уведомление, если авторизация уже совершена.
При встраивании в любой из компоновщиков, посылает в него признак, выполнен ли вход или нет.
Модуль навигации выполнен в стиле "хлебные крошки". При хождении по сайту он выстраивает иерархию с возможностью перехода на более старший уровень "вверх".
Шаблонизатор выполен отдельным классом. Потенциально, он может обрабатывать любые шаблоны и визуальные темы, созданные для этого веб приложения, поэтому обеспечивается требуемая гибкость. На вход он принимает название страницы, которая требуется к выводу и данные, которыми надо будет заполнять шаблоны, а на выходе - готовая к выводу на экран страница.
Также был разработан общий макет-правило, который позволил структурировать и упорядочить дальнейший процесс разработки веб-интерфейса. Будущая страница будет генерироваться по следующим уровням:
1) Уровень частей: состоит из верхней части и нижней части. Реализован с чисто технической целью организации «подвала» - нижней части контента
2) Уровень областей: логически более нагруженный уровень. Каждая часть делится на области, созданные для какой-то определенной цели: область заголовка, навигации, меню, контента и т.д.
3) Уровень списков. Чаще всего контент представлен в виде списков логически связанных элементов – пункты меню, уровни навигации, список тем, список сообщений и т.д. Каждый список будет заполнен шаблонизатором соответствующими элементами.

9. В ходе выполнения работы была поставлена задача реализовать систему управления контентом с поддержкой идеологии форумного общения. 
Были пройдены следующие этапы:
1) Изучение предметной области. Были рассмотрены основные черты и свойства аналогичных систем, указаны их достоинства и недостатки.
2) Рассмотрены существующие современные технологии, применимые в данной области веб-разработки.
3) Выбран инструментарий, позволивший корректно и максимально быстро выполнить поставленную задачу, с учетом совместной разработки.
4) Были выполнены необходимые этапы проектирования:
- анализ и проектирование архитектуры приложения, что в последствие позволило создать достаточно хорошо структурированное веб-приложение;
- проектирование базы данных, что позволило упорядоченно содержать выводимую информацию;
- проектирование внешнего вида приложения, для повышения удобства пользования приложением конечным пользователем;
- проектирование безопасности приложения, что обеспечило целостность, гибкость использования и конфиденциальность хранимой информации.
5) Было выполнено кодирование всех модулей и связей между ними, разработан интерфейс пользователя.
6) Была разработана необходимая документация для успешного внедрения разработанного ПО - инструкция пользователя и инструкция администратора, а также составлены требования к аппаратной и программной части сервера и клиента.